{"name": "test_network_setup_create_network_multi_level_venues[organization_admin_access_token-business_admin_org_id]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 201\n +  where 404 = <Response [404]>.status_code", "trace": "self = <shastacloud_test_automation.tests.shasta_be.test_network.TestNetwork object at 0x7f336adb54c0>\nnetwork_setup = <libs.shasta_be.network.NetworkSetup object at 0x7f336a912640>\naccess_token = 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjlrZkhZUy1kaVpYcENONTFmU2tFZiJ9.eyJodHRwOi8vc2hhc3RhLWNsb3VkLm5ldC9vcmdJ...pSRhXO5lciA_mRBWBnQYSwhXzeYuj2ywJdKRRkx_NeaQlTRX12tZxabHTdrT_lTAdA4ZmoHZrlhxH21r_MMQ_pIMDq1J_1cXBjSwuQxvg84jLlYEXb84YA'\nvenue_setup_e2e = <libs.e2e.venue_setup.VenueSetupE2E object at 0x7f336a912af0>, org_id = 3360\n\n    @pytest.mark.sanity\n    @pytest.mark.parametrize(\"access_token, org_id\", [\n        (\"platform_admin_access_token\", \"platform_admin_org_id\"),               # create network in current org\n        (\"platform_admin_access_token\", \"organization_admin_org_id\"),           # create network in child org\n        (\"platform_admin_access_token\", \"business_admin_org_id\"),               # create network in child of child org\n        (\"organization_admin_access_token\", \"organization_admin_org_id\"),       # create network in current org\n        (\"organization_admin_access_token\", \"business_admin_org_id\"),           # create network in child org\n        (\"business_admin_access_token\", \"business_admin_org_id\")                # create network in current org\n    ], indirect=[\"access_token\", \"org_id\"])\n    def test_network_setup_create_network_multi_level_venues(\n        self, network_setup, access_token, venue_setup_e2e, org_id\n    ):\n        \"\"\"\n        Test network_setup create network success (Admins can create networks across multi level venues)\n        \"\"\"\n        # make sure login was successful\n        network_setup.access_token = access_token\n        assert network_setup.access_token is not None\n    \n        # create a valid venue under org and get it's venueId\n        response = venue_setup_e2e.create_venue(admin_access_token=access_token, org_id=org_id)\n    \n        venue_id_0 = response.json()[\"venueId\"]\n    \n        # create a valid venue under the previously created venue\n        response = venue_setup_e2e.create_venue(admin_access_token=access_token, org_id=org_id, parent_venue_id=venue_id_0)\n        response_json = response.json()\n    \n        # verify parent-child relationship of created venue\n        assert response_json[\"parentVenueId\"] == venue_id_0\n    \n        venue_id_1 = response_json[\"venueId\"]\n    \n        # create another valid venue under the previously created venue\n        response = venue_setup_e2e.create_venue(admin_access_token=access_token, org_id=org_id, parent_venue_id=venue_id_1)\n        response_json = response.json()\n    \n        # verify parent-child relationship of created venue\n        assert response_json[\"parentVenueId\"] == venue_id_1\n    \n        venue_id_2 = response_json[\"venueId\"]\n    \n        payload = {\n            \"networkName\": constants.VALID_SSID,\n            \"networkTypeId\": NETWORK_TYPES[0][\"networkTypeId\"],\n            \"configuration\": {\n                \"name\": constants.VALID_SSID,\n                \"description\": constants.VALID_DESCRIPTION,\n                \"password\": constants.VALID_PASSWORD,\n                \"vlan\": constants.VALID_VLAN_ID,\n                \"downStream\": constants.VALID_DOWNSTREAM,\n                \"upStream\": constants.VALID_UPSTREAM,\n                \"clientIsolation\": False\n            },\n            \"venueId\": [\n                venue_id_0,\n                venue_id_1,\n                venue_id_2\n            ],\n            \"orgId\": org_id\n        }\n    \n        response = network_setup.create_network(payload=payload)\n    \n        # verify status code, content-type, validate against json schema,\n        # and verify that the created resource has the same attr-values as sent\n        payload_copy = copy.deepcopy(payload)\n        del payload_copy[\"venueId\"] # does not come in response\n>       assert check_response(\n            response, expected_status_code=constants.SUCCESS_RSP_POST, expected_content_type=\"JSON\",\n            json_schema=SCHEMAS[\"network\"], request_payload_sent=payload_copy\n        )\n\ntests/shasta_be/test_network.py:273: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [404]>, expected_status_code = 201, expected_content_type = 'JSON', expected_response_body = None\njson_schema = {'properties': {'configuration': {'properties': {'clientIsolation': {'type': 'boolean'}, 'description': {'type': 'stri...quired': ['networkId', 'networkName', 'description', 'updatedAt', 'createdAt', 'configuration', ...], 'type': 'object'}\nrequest_payload_sent = {'configuration': {'clientIsolation': False, 'description': 'Test Network', 'downStream': 50, 'name': 'Test Network SSID', ...}, 'networkName': 'Test Network SSID', 'networkTypeId': 1, 'orgId': 3360}\n\n    def check_response(\n            response, expected_status_code=None, expected_content_type=None,\n            expected_response_body=None, json_schema=None, request_payload_sent=None\n        ):\n        \"\"\"\n        A generic function to perform basic validation of responses\n        \"\"\"\n        if expected_status_code is not None:\n>           assert response.status_code == expected_status_code\nE           assert 404 == 201\nE            +  where 404 = <Response [404]>.status_code\n\nlibs/common_utils.py:49: AssertionError"}, "description": "\n        Test network_setup create network success (Admins can create networks across multi level venues)\n        ", "attachments": [{"name": "stdout", "source": "330d9b25-304b-4b6d-b0df-58f04817aaaf-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "access_token", "value": "'organization_admin_access_token'"}, {"name": "org_id", "value": "'business_admin_org_id'"}], "start": 1661840348321, "stop": 1661840348968, "uuid": "b067f876-9d19-42ac-9e46-d6aa62a642bf", "historyId": "92ff3e4ece193401d63ccae4f18fc784", "testCaseId": "501b02f89073566aac4b50f0ae72d911", "fullName": "tests.shasta_be.test_network.TestNetwork#test_network_setup_create_network_multi_level_venues", "labels": [{"name": "tag", "value": "sanity"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.shasta_be"}, {"name": "suite", "value": "test_network"}, {"name": "subSuite", "value": "TestNetwork"}, {"name": "host", "value": "GURM-CGW1JG3"}, {"name": "thread", "value": "30535-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.shasta_be.test_network"}]}