{"name": "test_network_setup_create_network_invalid_venue_id", "status": "failed", "statusDetails": {"message": "AssertionError: assert {'error': {'message': \"99999999 : Venue Doesn't Exists\", 'statusCode': 404}} == {'error': {'message': \"Venue Doesn't Exists\", 'statusCode': 404}}\n  Differing items:\n  {'error': {'message': \"99999999 : Venue Doesn't Exists\", 'statusCode': 404}} != {'error': {'message': \"Venue Doesn't Exists\", 'statusCode': 404}}\n  Full diff:\n  - {'error': {'message': \"Venue Doesn't Exists\", 'statusCode': 404}}\n  + {'error': {'message': \"99999999 : Venue Doesn't Exists\", 'statusCode': 404}}\n  ?                        +++++++++++", "trace": "self = <shastacloud_test_automation.tests.shasta_be.test_network.TestNetwork object at 0x7fe387f762b0>\nnetwork_setup = <libs.shasta_be.network.NetworkSetup object at 0x7fe387bb8460>\nplatform_admin_access_token = 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjlrZkhZUy1kaVpYcENONTFmU2tFZiJ9.eyJodHRwOi8vc2hhc3RhLWNsb3VkLm5ldC9vcmdJ...ZR1fjCpDkcj7vQKWzIK91sMkvG_-hNBa00jSntWBy2D5EK_DrVJJ9Dq3gSwqsLx9tQ5eaEZKc8CNGK26mwOJkngAiBqsTD6se-EMZnnGiX5vmbxP_8ENZQ'\nplatform_admin_org_id = 1\n\n    def test_network_setup_create_network_invalid_venue_id(self, network_setup, platform_admin_access_token, platform_admin_org_id):\n        \"\"\"\n        Test network_setup create network failure (invalid venue id)\n        \"\"\"\n        # make sure login was successful\n        network_setup.access_token = platform_admin_access_token\n        assert network_setup.access_token is not None\n    \n        payload = {\n            \"networkName\": constants.VALID_SSID,\n            \"networkTypeId\": NETWORK_TYPES[0][\"networkTypeId\"],\n            \"configuration\": {\n                \"name\": constants.VALID_SSID,\n                \"description\": constants.VALID_DESCRIPTION,\n                \"password\": constants.VALID_PASSWORD,\n                \"vlan\": constants.VALID_VLAN_ID,\n                \"downStream\": constants.VALID_DOWNSTREAM,\n                \"upStream\": constants.VALID_UPSTREAM,\n                \"clientIsolation\": False\n            },\n            \"venueId\": [\n                constants.INVALID_ID\n            ],\n            \"orgId\": platform_admin_org_id\n        }\n    \n        response = network_setup.create_network(payload=payload)\n    \n>       assert check_response(\n            response, expected_status_code=constants.ERROR_RSP_NOT_FOUND, expected_content_type=\"JSON\",\n            expected_response_body=ERROR_RESPONSES[\"venue_not_found\"]\n        )\n\ntests/shasta_be/test_network.py:796: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [404]>, expected_status_code = 404, expected_content_type = 'JSON'\nexpected_response_body = {'error': {'message': \"Venue Doesn't Exists\", 'statusCode': 404}}, json_schema = None\nrequest_payload_sent = None\n\n    def check_response(\n            response, expected_status_code=None, expected_content_type=None,\n            expected_response_body=None, json_schema=None, request_payload_sent=None\n        ):\n        \"\"\"\n        A generic function to perform basic validation of responses\n        \"\"\"\n        if expected_status_code is not None:\n            assert response.status_code == expected_status_code\n    \n        if expected_content_type is not None:\n            if expected_content_type == \"JSON\":\n                # verify that response content type is JSON\n                assert 'application/json' in response.headers.get('Content-Type')\n    \n                # further tests that require response body to be JSON\n                response_json = response.json()\n    \n                if expected_response_body is not None:\n>                   assert response_json == expected_response_body\nE                   assert {'error': {'message': \"99999999 : Venue Doesn't Exists\", 'statusCode': 404}} == {'error': {'message': \"Venue Doesn't Exists\", 'statusCode': 404}}\nE                     Differing items:\nE                     {'error': {'message': \"99999999 : Venue Doesn't Exists\", 'statusCode': 404}} != {'error': {'message': \"Venue Doesn't Exists\", 'statusCode': 404}}\nE                     Full diff:\nE                     - {'error': {'message': \"Venue Doesn't Exists\", 'statusCode': 404}}\nE                     + {'error': {'message': \"99999999 : Venue Doesn't Exists\", 'statusCode': 404}}\nE                     ?                        +++++++++++\n\nlibs/common_utils.py:60: AssertionError"}, "description": "\n        Test network_setup create network failure (invalid venue id)\n        ", "attachments": [{"name": "stdout", "source": "75ee5646-c7e8-421e-97c8-75fd806a4b10-attachment.txt", "type": "text/plain"}], "start": 1661841035849, "stop": 1661841035930, "uuid": "e9da7e24-9ae4-46c4-868e-a1c33c282492", "historyId": "8092837d7d151e5b98f13215cdd63ff9", "testCaseId": "2602ad7ea1b334b2659615fc3a4bc9c0", "fullName": "tests.shasta_be.test_network.TestNetwork#test_network_setup_create_network_invalid_venue_id", "labels": [{"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.shasta_be"}, {"name": "suite", "value": "test_network"}, {"name": "subSuite", "value": "TestNetwork"}, {"name": "host", "value": "GURM-CGW1JG3"}, {"name": "thread", "value": "795-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.shasta_be.test_network"}]}