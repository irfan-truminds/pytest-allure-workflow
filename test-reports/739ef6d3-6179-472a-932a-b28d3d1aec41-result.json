{"name": "test_network_setup_create_network_invalid_integer_fields_invalid_string_length_and_pattern[networkName-None--422-expected_response_body1]", "status": "failed", "statusDetails": {"message": "AssertionError: assert {'error': {'message': \"Network Name and SSID doesn't match\", 'statusCode': 422}} == {}\n  Left contains 1 more item:\n  {'error': {'message': \"Network Name and SSID doesn't match\", 'statusCode': 422}}\n  Full diff:\n  - {}\n  + {'error': {'message': \"Network Name and SSID doesn't match\", 'statusCode': 422}}", "trace": "self = <shastacloud_test_automation.tests.shasta_be.test_network.TestNetwork object at 0x7fe387f76550>\nnetwork_setup = <libs.shasta_be.network.NetworkSetup object at 0x7fe387bb8460>\nvenue_setup_e2e = <libs.e2e.venue_setup.VenueSetupE2E object at 0x7fe387bb8730>\nplatform_admin_access_token = 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjlrZkhZUy1kaVpYcENONTFmU2tFZiJ9.eyJodHRwOi8vc2hhc3RhLWNsb3VkLm5ldC9vcmdJ...ZR1fjCpDkcj7vQKWzIK91sMkvG_-hNBa00jSntWBy2D5EK_DrVJJ9Dq3gSwqsLx9tQ5eaEZKc8CNGK26mwOJkngAiBqsTD6se-EMZnnGiX5vmbxP_8ENZQ'\nplatform_admin_org_id = 1, key = 'networkName', subkey = None, value = '', expected_status_code = 422, expected_response_body = {}\n\n    @pytest.mark.parametrize(\"key, subkey, value, expected_status_code, expected_response_body\", [\n        # networkName\n        (\"networkName\", None, constants.INVALID_SSID_GT_MAX_LEN, constants.ERROR_RSP_UNPROC_ENTITY, ERROR_RESPONSES[\"create_network\"][\"network_name_gt_max_len\"]),\n        (\"networkName\", None, constants.INVALID_SSID_LT_MIN_LEN, constants.ERROR_RSP_UNPROC_ENTITY, ERROR_RESPONSES[\"create_network\"][\"network_name_lt_min_len\"]),\n        (\"networkName\", None, constants.INVALID_SSID, constants.ERROR_RSP_BAD_REQ, ERROR_RESPONSES[\"create_network\"][\"network_name_pattern_mismatch\"]),\n    \n        # configuration - description\n        (\"configuration\", \"description\", constants.INVALID_DESCRIPTION_GT_MAX_LEN, constants.ERROR_RSP_UNPROC_ENTITY, ERROR_RESPONSES[\"create_network\"][\"configuration_description_gt_max_len\"]),\n        (\"configuration\", \"description\", constants.INVALID_DESCRIPTION_LT_MIN_LEN, constants.ERROR_RSP_UNPROC_ENTITY, ERROR_RESPONSES[\"create_network\"][\"configuration_description_lt_min_len\"]),\n    \n        # configuration - password\n        (\"configuration\", \"password\", constants.INVALID_PASSWORD_LT_MIN_LEN, constants.ERROR_RSP_UNPROC_ENTITY, ERROR_RESPONSES[\"create_network\"][\"configuration_password_lt_min_len\"]),\n        (\"configuration\", \"password\", constants.INVALID_PASSWORD_GT_MAX_LEN, constants.ERROR_RSP_UNPROC_ENTITY, ERROR_RESPONSES[\"create_network\"][\"configuration_password_gt_max_len\"]),\n        #(\"configuration\", \"password\", constants.INVALID_PASSWORD, constants.ERROR_RSP_UNPROC_ENTITY, ERROR_RESPONSES[\"create_network\"][\"configuration_password_pattern_mismatch\"]),\n    \n        # configuration - VLAN\n        (\"configuration\", \"vlan\", constants.INVALID_VLAN_ID_GT_MAX, constants.ERROR_RSP_UNPROC_ENTITY, ERROR_RESPONSES[\"create_network\"][\"configuration_vlan_gt_max\"]),\n        (\"configuration\", \"vlan\", constants.INVALID_VLAN_ID_LT_MIN, constants.ERROR_RSP_UNPROC_ENTITY, ERROR_RESPONSES[\"create_network\"][\"configuration_vlan_lt_min\"]),\n        (\"configuration\", \"vlan\", constants.INVALID_VLAN_ID, constants.ERROR_RSP_UNPROC_ENTITY, ERROR_RESPONSES[\"create_network\"][\"configuration_vlan_lt_min\"]),\n    \n        # configuration - downStream\n        (\"configuration\", \"downStream\", constants.INVALID_DOWNSTREAM_GT_MAX, constants.ERROR_RSP_UNPROC_ENTITY, ERROR_RESPONSES[\"create_network\"][\"configuration_down_stream_gt_max\"]),\n        (\"configuration\", \"downStream\", constants.INVALID_DOWNSTREAM_LT_MIN, constants.ERROR_RSP_UNPROC_ENTITY, ERROR_RESPONSES[\"create_network\"][\"configuration_down_stream_lt_min\"]),\n    \n        # configuration - upStream\n        (\"configuration\", \"upStream\", constants.INVALID_UPSTREAM_GT_MAX, constants.ERROR_RSP_UNPROC_ENTITY, ERROR_RESPONSES[\"create_network\"][\"configuration_up_stream_gt_max\"]),\n        (\"configuration\", \"upStream\", constants.INVALID_UPSTREAM_LT_MIN, constants.ERROR_RSP_UNPROC_ENTITY, ERROR_RESPONSES[\"create_network\"][\"configuration_up_stream_lt_min\"]),\n    ])\n    def test_network_setup_create_network_invalid_integer_fields_invalid_string_length_and_pattern(\n        self, network_setup, venue_setup_e2e, platform_admin_access_token, platform_admin_org_id,\n        key, subkey, value, expected_status_code, expected_response_body\n    ):\n        \"\"\"\n        Test network_setup create network failure (invalid integer fields, invalid length or pattern of string fields)\n        \"\"\"\n    \n        # make sure login was successful\n        network_setup.access_token = platform_admin_access_token\n        assert network_setup.access_token is not None\n    \n        # create a valid venue under org and get it's venueId\n        response = venue_setup_e2e.create_venue(admin_access_token=platform_admin_access_token, org_id=platform_admin_org_id)\n    \n        venue_id = response.json()[\"venueId\"]\n    \n        # take a valid payload\n        payload = {\n            \"networkName\": constants.VALID_SSID,\n            \"networkTypeId\": NETWORK_TYPES[0][\"networkTypeId\"],\n            \"configuration\": {\n                \"name\": constants.VALID_SSID,\n                \"description\": constants.VALID_DESCRIPTION,\n                \"password\": constants.VALID_PASSWORD,\n                \"vlan\": constants.VALID_VLAN_ID,\n                \"downStream\": constants.VALID_DOWNSTREAM,\n                \"upStream\": constants.VALID_UPSTREAM,\n                \"clientIsolation\": False\n            },\n            \"venueId\": [\n                venue_id\n            ],\n            \"orgId\": platform_admin_org_id\n        }\n    \n        # override some attr value with test case specific value\n        if subkey is None:\n            payload[key] = value\n        else:\n            payload[key][subkey] = value\n    \n        response = network_setup.create_network(payload=payload)\n    \n>       assert check_response(\n            response, expected_status_code=expected_status_code, expected_content_type=\"JSON\",\n            expected_response_body=expected_response_body\n        )\n\ntests/shasta_be/test_network.py:724: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [422]>, expected_status_code = 422, expected_content_type = 'JSON', expected_response_body = {}\njson_schema = None, request_payload_sent = None\n\n    def check_response(\n            response, expected_status_code=None, expected_content_type=None,\n            expected_response_body=None, json_schema=None, request_payload_sent=None\n        ):\n        \"\"\"\n        A generic function to perform basic validation of responses\n        \"\"\"\n        if expected_status_code is not None:\n            assert response.status_code == expected_status_code\n    \n        if expected_content_type is not None:\n            if expected_content_type == \"JSON\":\n                # verify that response content type is JSON\n                assert 'application/json' in response.headers.get('Content-Type')\n    \n                # further tests that require response body to be JSON\n                response_json = response.json()\n    \n                if expected_response_body is not None:\n>                   assert response_json == expected_response_body\nE                   assert {'error': {'message': \"Network Name and SSID doesn't match\", 'statusCode': 422}} == {}\nE                     Left contains 1 more item:\nE                     {'error': {'message': \"Network Name and SSID doesn't match\", 'statusCode': 422}}\nE                     Full diff:\nE                     - {}\nE                     + {'error': {'message': \"Network Name and SSID doesn't match\", 'statusCode': 422}}\n\nlibs/common_utils.py:60: AssertionError"}, "description": "\n        Test network_setup create network failure (invalid integer fields, invalid length or pattern of string fields)\n        ", "attachments": [{"name": "stdout", "source": "2d03748f-36e7-41dc-a914-22d151b4211a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "key", "value": "'networkName'"}, {"name": "subkey", "value": "None"}, {"name": "value", "value": "''"}, {"name": "expected_status_code", "value": "422"}, {"name": "expected_response_body", "value": "{}"}], "start": 1661840998645, "stop": 1661840998997, "uuid": "a65c123c-917a-4e24-b3e7-485eeb63fbe7", "historyId": "d5db5a8682a3e59c667aad9d976291e4", "testCaseId": "3ff0c1ed869cb8dfc35387263039eca9", "fullName": "tests.shasta_be.test_network.TestNetwork#test_network_setup_create_network_invalid_integer_fields_invalid_string_length_and_pattern", "labels": [{"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.shasta_be"}, {"name": "suite", "value": "test_network"}, {"name": "subSuite", "value": "TestNetwork"}, {"name": "host", "value": "GURM-CGW1JG3"}, {"name": "thread", "value": "795-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.shasta_be.test_network"}]}