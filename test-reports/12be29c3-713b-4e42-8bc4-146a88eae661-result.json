{"name": "test_network_setup_create_network_valid_integer_fields_valid_string_length_and_pattern[networkName-None-Test Network Valid SSID Max  Len]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 422 == 201\n +  where 422 = <Response [422]>.status_code", "trace": "self = <shastacloud_test_automation.tests.shasta_be.test_network.TestNetwork object at 0x7f336adb5970>\nnetwork_setup = <libs.shasta_be.network.NetworkSetup object at 0x7f336a912640>\nplatform_admin_access_token = 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjlrZkhZUy1kaVpYcENONTFmU2tFZiJ9.eyJodHRwOi8vc2hhc3RhLWNsb3VkLm5ldC9vcmdJ...ZR1fjCpDkcj7vQKWzIK91sMkvG_-hNBa00jSntWBy2D5EK_DrVJJ9Dq3gSwqsLx9tQ5eaEZKc8CNGK26mwOJkngAiBqsTD6se-EMZnnGiX5vmbxP_8ENZQ'\nplatform_admin_org_id = 1, venue_setup_e2e = <libs.e2e.venue_setup.VenueSetupE2E object at 0x7f336a912af0>, key = 'networkName'\nsubkey = None, value = 'Test Network Valid SSID Max  Len'\n\n    @pytest.mark.sanity\n    @pytest.mark.parametrize(\n        \"key, subkey, value\", [\n            # networkName\n            (\"networkName\", None, constants.VALID_SSID_MAX_LEN),\n            (\"networkName\", None, constants.VALID_SSID_MIN_LEN),\n            (\"networkName\", None, constants.VALID_SSID),\n    \n            # configuration - description\n            (\"configuration\", \"description\", constants.VALID_DESCRIPTION_MIN_LEN),\n            (\"configuration\", \"description\", constants.VALID_DESCRIPTION_MAX_LEN),\n            (\"configuration\", \"description\", constants.VALID_DESCRIPTION),\n    \n            # configuration - password\n            (\"configuration\", \"password\", constants.VALID_PASSWORD_MAX_LEN),\n            (\"configuration\", \"password\", constants.VALID_PASSWORD_MIN_LEN),\n            (\"configuration\", \"password\", constants.VALID_PASSWORD),\n    \n            # configuration - VLAN\n            (\"configuration\", \"vlan\", constants.VALID_VLAN_ID_MAX),\n            (\"configuration\", \"vlan\", constants.VALID_VLAN_ID_MIN),\n            (\"configuration\", \"vlan\", constants.VALID_VLAN_ID),\n    \n            # configuration - downStream\n            (\"configuration\", \"downStream\", constants.VALID_DOWNSTREAM_MAX),\n            (\"configuration\", \"downStream\", constants.VALID_DOWNSTREAM_MIN),\n            (\"configuration\", \"downStream\", constants.VALID_DOWNSTREAM),\n    \n            # configuration - upStream\n            (\"configuration\", \"upStream\", constants.VALID_UPSTREAM_MAX),\n            (\"configuration\", \"upStream\", constants.VALID_UPSTREAM_MIN),\n            (\"configuration\", \"upStream\", constants.VALID_UPSTREAM),\n        ]\n    )\n    def test_network_setup_create_network_valid_integer_fields_valid_string_length_and_pattern(\n        self, network_setup, platform_admin_access_token, platform_admin_org_id,\n        venue_setup_e2e, key, subkey, value\n    ):\n        \"\"\"\n        Test network setup create network success (valid integer fields, valid length or pattern of string fields)\n        \"\"\"\n    \n        # make sure login was successful\n        network_setup.access_token = platform_admin_access_token\n        assert network_setup.access_token is not None\n    \n        # create a valid venue under org and get it's venueId\n        response = venue_setup_e2e.create_venue(admin_access_token=platform_admin_access_token, org_id=platform_admin_org_id)\n    \n        venue_id = response.json()[\"venueId\"]\n    \n        # take a valid payload\n        payload = {\n            \"networkName\": constants.VALID_SSID,\n            \"networkTypeId\": NETWORK_TYPES[0][\"networkTypeId\"],\n            \"configuration\": {\n                \"name\": constants.VALID_SSID,\n                \"description\": constants.VALID_DESCRIPTION,\n                \"password\": constants.VALID_PASSWORD,\n                \"vlan\": constants.VALID_VLAN_ID,\n                \"downStream\": constants.VALID_DOWNSTREAM,\n                \"upStream\": constants.VALID_UPSTREAM,\n                \"clientIsolation\": False\n            },\n            \"venueId\": [\n                venue_id\n            ],\n            \"orgId\": platform_admin_org_id\n        }\n    \n        # override some attr value with test case specific value\n        if subkey is None:\n            payload[key] = value\n        else:\n            payload[key][subkey] = value\n    \n        response = network_setup.create_network(payload=payload)\n    \n        # verify status code, content-type, validate against json schema,\n        # and verify that the created resource has the same attr-values as sent\n        payload_copy = copy.deepcopy(payload)\n        del payload_copy[\"venueId\"] # does not come in response\n>       assert check_response(\n            response, expected_status_code=constants.SUCCESS_RSP_POST, expected_content_type=\"JSON\",\n            json_schema=SCHEMAS[\"network\"], request_payload_sent=payload_copy\n        )\n\ntests/shasta_be/test_network.py:378: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [422]>, expected_status_code = 201, expected_content_type = 'JSON', expected_response_body = None\njson_schema = {'properties': {'configuration': {'properties': {'clientIsolation': {'type': 'boolean'}, 'description': {'type': 'stri...quired': ['networkId', 'networkName', 'description', 'updatedAt', 'createdAt', 'configuration', ...], 'type': 'object'}\nrequest_payload_sent = {'configuration': {'clientIsolation': False, 'description': 'Test Network', 'downStream': 50, 'name': 'Test Network SSID', ...}, 'networkName': 'Test Network Valid SSID Max  Len', 'networkTypeId': 1, 'orgId': 1}\n\n    def check_response(\n            response, expected_status_code=None, expected_content_type=None,\n            expected_response_body=None, json_schema=None, request_payload_sent=None\n        ):\n        \"\"\"\n        A generic function to perform basic validation of responses\n        \"\"\"\n        if expected_status_code is not None:\n>           assert response.status_code == expected_status_code\nE           assert 422 == 201\nE            +  where 422 = <Response [422]>.status_code\n\nlibs/common_utils.py:49: AssertionError"}, "description": "\n        Test network setup create network success (valid integer fields, valid length or pattern of string fields)\n        ", "attachments": [{"name": "stdout", "source": "b0815637-8917-465c-803f-aa702f3d035b-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "key", "value": "'networkName'"}, {"name": "subkey", "value": "None"}, {"name": "value", "value": "'Test Network Valid SSID Max  Len'"}], "start": 1661840350193, "stop": 1661840350519, "uuid": "9a0a45f7-4a56-43a4-851e-2265561977ff", "historyId": "fbce8146ff9ab5dd4952403b6f38ca7e", "testCaseId": "99e3f8d5884bfd3c5c325f1113fcdb18", "fullName": "tests.shasta_be.test_network.TestNetwork#test_network_setup_create_network_valid_integer_fields_valid_string_length_and_pattern", "labels": [{"name": "tag", "value": "sanity"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.shasta_be"}, {"name": "suite", "value": "test_network"}, {"name": "subSuite", "value": "TestNetwork"}, {"name": "host", "value": "GURM-CGW1JG3"}, {"name": "thread", "value": "30535-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.shasta_be.test_network"}]}